//–––––––––––––––––––––
//  REM CONVERTER
//–––––––––––––––––––––

$text-base-size: 16px;

@function rem($size) {
  @return #{$size / $text-base-size}rem;
}

//–––––––––––––––––––––
//  RESPOND ABOVE
//–––––––––––––––––––––

// @include respond-above(sm) {}
@mixin respond-above($breakpoint) {
  // If the breakpoint exists in the map.
  @if map-has-key($breakpoints, $breakpoint) {
    // Get the breakpoint value.
    $breakpoint-value: map-get($breakpoints, $breakpoint);

    // Write the media query.
    @media (min-width: $breakpoint-value) {
      @content;
    }

    // If the breakpoint doesn't exist in the map.
  } @else {
    // Log a warning.
    @warn 'Invalid breakpoint: #{$breakpoint}.';
  }
}

//–––––––––––––––––––––
//  RESPOND BELOW
//–––––––––––––––––––––

// @include respond-below(sm) {}
@mixin respond-below($breakpoint) {
  // If the breakpoint exists in the map.
  @if map-has-key($breakpoints, $breakpoint) {
    // Get the breakpoint value.
    $breakpoint-value: map-get($breakpoints, $breakpoint);

    // Write the media query.
    @media (max-width: ($breakpoint-value - 1)) {
      @content;
    }

    // If the breakpoint doesn't exist in the map.
  } @else {
    // Log a warning.
    @warn 'Invalid breakpoint: #{$breakpoint}.';
  }
}

//–––––––––––––––––––––
//  RESPOND BEETWEEN
//–––––––––––––––––––––

// @include respond-between(sm, md) {}
@mixin respond-between($lower, $upper) {
  // If both the lower and upper breakpoints exist in the map.
  @if map-has-key($breakpoints, $lower) and map-has-key($breakpoints, $upper) {
    // Get the lower and upper breakpoints.
    $lower-breakpoint: map-get($breakpoints, $lower);
    $upper-breakpoint: map-get($breakpoints, $upper);

    // Write the media query.
    @media (min-width: $lower-breakpoint) and (max-width: ($upper-breakpoint - 1)) {
      @content;
    }

    // If one or both of the breakpoints don't exist.
  } @else {
    // If lower breakpoint is invalid.
    @if (map-has-key($breakpoints, $lower) == false) {
      // Log a warning.
      @warn 'Your lower breakpoint was invalid: #{$lower}.';
    }

    // If upper breakpoint is invalid.
    @if (map-has-key($breakpoints, $upper) == false) {
      // Log a warning.
      @warn 'Your upper breakpoint was invalid: #{$upper}.';
    }
  }
}

//–––––––––––––––––––––
//  EXPANDED ABSOLUTE
//–––––––––––––––––––––

@mixin expanded-abs {
  position: absolute;
  top: 0;
  bottom: 0;
  left: 0;
  right: 0;
}

//–––––––––––––––––––––
//  EXPANDED FIXED
//–––––––––––––––––––––

@mixin expanded-fix {
  position: fixed;
  top: 0;
  bottom: 0;
  left: 0;
  right: 0;
}

//–––––––––––––––––––––
//  COMPONENT SPACERS
//–––––––––––––––––––––

$resolution-range-bottom: map-get($breakpoints, xs);
$resolution-range-top: map-get($breakpoints, xxl);

@function get-linear-size($mobile-size, $desktop-size) {
  $a: ($desktop-size - $mobile-size) /
    ($resolution-range-top - $resolution-range-bottom);
  $b: -$a * $resolution-range-bottom;
  @return calc(#{$a} * 100vw + #{$b + $mobile-size});
}

@mixin v-spacing($field, $mobile-size, $desktop-size) {
  #{$field}: get-linear-size($mobile-size, $desktop-size);
  @include respond-above(xxl) {
    #{$field}: $desktop-size;
  }
  @include respond-below(s) {
    #{$field}: $mobile-size;
  }
}

// Example to include margin-bottom @include v-spacing(margin-bottom, 40px, 100px);

//–––––––––––––––––––––
//  PADDING WRAPPER
//–––––––––––––––––––––

$p-wp-mobile: 20px;
$p-wp-tablet: 40px;
$p-wp-desktop: 55px;

@mixin padding-wrapper {
  padding-left: $p-wp-mobile;
  padding-right: $p-wp-mobile;
  @include respond-above(s) {
    padding-left: $p-wp-tablet;
    padding-right: $p-wp-tablet;
  }
  @include respond-above(l) {
    padding-left: $p-wp-desktop;
    padding-right: $p-wp-desktop;
  }
}

@mixin viewport-height($property: height, $vh: 100) {
  #{$property}: (1vh * $vh);
  #{$property}: calc(var(--vh, 1vh) * #{$vh});
}

//–––––––––––––––––––––
//  IMAGE CROP
//–––––––––––––––––––––

@mixin allow-crop {
  position: absolute;
  transform: translate(-50%, -50%);
  top: 50%;
  left: 50%;
  width: 100%;
  height: auto;
  &.focusOnTop {
    top: 0;
    transform: translate(-50%, 0%);
  }
  &.focusOnBottom {
    top: auto;
    bottom: 0;
    transform: translate(-50%, 0%);
  }
}

//–––––––––––––––––––––
//  GRADIENT BOX
//–––––––––––––––––––––

@mixin gradient-class {
  &.gradientLeftTop {
    background-image: radial-gradient(
      farthest-corner at left top,
      rgb(25, 52, 73) 0%,
      black 75%
    );
  }

  &.gradientLeftBottom {
    background-image: radial-gradient(
      farthest-corner at left bottom,
      rgb(25, 52, 73) 0%,
      black 75%
    );
  }

  &.gradientRightTop {
    background-image: radial-gradient(
      farthest-corner at right top,
      rgb(25, 52, 73) 0%,
      black 75%
    );
  }

  &.gradientRightBottom {
    background-image: radial-gradient(
      farthest-corner at right bottom,
      rgb(25, 52, 73) 0%,
      black 75%
    );
  }

  // Only for gradient top insert bottom a background black
  &.gradientLeftTop,
  &.gradientRightTop {
    &:after {
      content: "";
      display: block;
      position: absolute;
      bottom: 0;
      left: 0;
      width: 100%;
      height: 20%;
      background: linear-gradient(
        0deg,
        rgba(0, 0, 0, 1) 0%,
        rgba(0, 0, 0, 0) 100%
      );
      pointer-events: none;
      @include respond-above(s) {
        height: 30%;
      }
    }
  }
}

//–––––––––––––––––––––
//  SECTION TOTEM
//–––––––––––––––––––––

@mixin section-totem {
  display: block;
  position: relative;
  width: 100%;
}

//–––––––––––––––––––––
//  MAX WIDTH TOTEM
//–––––––––––––––––––––

@mixin max-width-totem {
  display: block;
  position: relative;
  max-width: rem(1440px);
  width: 100%;
  margin: 0 auto;
}

//–––––––––––––––––––––
//  INNER WIDTH TOTEM
//–––––––––––––––––––––

@mixin inner-width-totem {
  max-width: rem(1000px);
  width: 100%;
  margin: 0 auto;
  text-align: center;
}

//–––––––––––––––––––––
//  GRID CONTAINER
//–––––––––––––––––––––

@mixin grid-container {
  display: flex;
  justify-content: flex-start;
  flex-wrap: wrap;
  margin: rem(40px) 0 rem(20px) rem(20px);
  @include respond-above(s) {
    margin: rem(40px) 0 rem(40px) rem(40px);
  }
}

//–––––––––––––––––––––
//  ITEM GRID
//–––––––––––––––––––––

@mixin item-grid {
  position: relative;
  display: flex;
  justify-content: center;
  align-items: center;
  overflow: hidden;
  width: calc(100% - 20px);
  margin-right: rem(20px);
  margin-bottom: rem(20px);
  background-color: $grey-2;

  @include respond-above(s) {
    margin-right: rem(40px);
    margin-bottom: rem(40px);
    width: calc(50% - 40px);
  }

  @include respond-above(m) {
    width: calc(33.33% - 40px);
  }

  &:before {
    content: "";
    display: block;
    padding-bottom: 100%;
  }
}

//–––––––––––––––––––––
//  ITEM GRADIENT
//–––––––––––––––––––––

@mixin item-gradient {
  content: "";
  background: $black;
  width: 180px;
  height: 180px;
  position: absolute;
  bottom: 0;
  left: 50%;
  transform: translateX(-50%) translateY(130%) rotate(-45deg);
  transition: $arrowTransitionBack;
  z-index: 9;
}

//–––––––––––––––––––––
//  HIDDEN SCROLLBAR
//–––––––––––––––––––––

@mixin hidden-scrollbar {
  /* Hide scrollbar for IE, Edge and Firefox */
  -ms-overflow-style: none; /* IE and Edge */
  scrollbar-width: none; /* Firefox */

  /* Hide scrollbar for Chrome, Safari and Opera */
  &::-webkit-scrollbar {
    display: none;
  }
}

//–––––––––––––––––––––
//  BUTTON PRIMARY
//–––––––––––––––––––––

@mixin button-primary {
  display: block;
  position: relative;
  cursor: pointer;
  background: $primary;
  width: fit-content;
  padding: rem(8px) rem(52px);
  @include headline-3;
  color: $grey-2;
  transition: $transition;

  &:hover {
    background-color: $white;
  }
}

//–––––––––––––––––––––
//  BUTTON SECONDARY
//–––––––––––––––––––––

@mixin button-secondary {
  display: block;
  position: relative;
  cursor: pointer;
  border: rem(1px) solid $grey-1;
  width: fit-content;
  padding: rem(8px) rem(52px);
  @include headline-3;
  color: $grey-1;
  margin-bottom: rem(20px);
  transition: $transition;

  &:hover {
    color: $white;
    border: rem(1px) solid $white;
    background-color: rgba(255, 255, 255, 0.1);
  }
}